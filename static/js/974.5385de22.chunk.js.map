{"version":3,"file":"static/js/974.5385de22.chunk.js","mappings":"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","sources":["../node_modules/@mui/private-theming/ThemeProvider/nested.js","../node_modules/@mui/private-theming/ThemeProvider/ThemeProvider.js","../node_modules/@mui/system/esm/ThemeProvider/ThemeProvider.js","constants/task.enum.ts","webpack://my_todo_list/./src/components/EditableTitle/EditableTitle.module.scss?2e1a","components/EditableTitle/EditableTitle.tsx","features/todolists/Task/Task.tsx","webpack://my_todo_list/./src/features/todolists/Todolist/Todolist.module.scss?a696","features/todolists/Todolist/Todolist.tsx","webpack://my_todo_list/./src/features/todolists/Todolists.module.scss?ce11","features/todolists/Todolists.tsx","../node_modules/@mui/icons-material/Delete.js"],"sourcesContent":["const hasSymbol = typeof Symbol === 'function' && Symbol.for;\nexport default hasSymbol ? Symbol.for('mui.nested') : '__THEME_NESTED__';","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp } from '@mui/utils';\nimport ThemeContext from '../useTheme/ThemeContext';\nimport useTheme from '../useTheme';\nimport nested from './nested';\n\n// To support composition of theme.\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction mergeOuterLocalTheme(outerTheme, localTheme) {\n  if (typeof localTheme === 'function') {\n    const mergedTheme = localTheme(outerTheme);\n    if (process.env.NODE_ENV !== 'production') {\n      if (!mergedTheme) {\n        console.error(['MUI: You should return an object from your theme function, i.e.', '<ThemeProvider theme={() => ({})} />'].join('\\n'));\n      }\n    }\n    return mergedTheme;\n  }\n  return _extends({}, outerTheme, localTheme);\n}\n\n/**\n * This component takes a `theme` prop.\n * It makes the `theme` available down the React tree thanks to React context.\n * This component should preferably be used at **the root of your component tree**.\n */\nfunction ThemeProvider(props) {\n  const {\n    children,\n    theme: localTheme\n  } = props;\n  const outerTheme = useTheme();\n  if (process.env.NODE_ENV !== 'production') {\n    if (outerTheme === null && typeof localTheme === 'function') {\n      console.error(['MUI: You are providing a theme function prop to the ThemeProvider component:', '<ThemeProvider theme={outerTheme => outerTheme} />', '', 'However, no outer theme is present.', 'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.'].join('\\n'));\n    }\n  }\n  const theme = React.useMemo(() => {\n    const output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);\n    if (output != null) {\n      output[nested] = outerTheme !== null;\n    }\n    return output;\n  }, [localTheme, outerTheme]);\n  return /*#__PURE__*/_jsx(ThemeContext.Provider, {\n    value: theme,\n    children: children\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = {\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node,\n  /**\n   * A theme object. You can provide a function to extend the outer theme.\n   */\n  theme: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired\n} : void 0;\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes) : void 0;\n}\nexport default ThemeProvider;","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { ThemeProvider as MuiThemeProvider } from '@mui/private-theming';\nimport { exactProp } from '@mui/utils';\nimport { ThemeContext as StyledEngineThemeContext } from '@mui/styled-engine';\nimport useTheme from '../useTheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst EMPTY_THEME = {};\nfunction InnerThemeProvider(props) {\n  const theme = useTheme();\n  return /*#__PURE__*/_jsx(StyledEngineThemeContext.Provider, {\n    value: typeof theme === 'object' ? theme : EMPTY_THEME,\n    children: props.children\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? InnerThemeProvider.propTypes = {\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node\n} : void 0;\n\n/**\n * This component makes the `theme` available down the React tree.\n * It should preferably be used at **the root of your component tree**.\n */\nfunction ThemeProvider(props) {\n  const {\n    children,\n    theme: localTheme\n  } = props;\n  return /*#__PURE__*/_jsx(MuiThemeProvider, {\n    theme: localTheme,\n    children: /*#__PURE__*/_jsx(InnerThemeProvider, {\n      children: children\n    })\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node,\n  /**\n   * A theme object. You can provide a function to extend the outer theme.\n   */\n  theme: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired\n} : void 0;\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes) : void 0;\n}\nexport default ThemeProvider;","export enum TaskStatuses {\r\n  New = 0,\r\n  InProgress = 1,\r\n  Completed = 2,\r\n  Draft = 3,\r\n}\r\n\r\nexport enum TaskPriorities {\r\n  Low = 0,\r\n  Middle = 1,\r\n  Hi = 2,\r\n  Urgently = 3,\r\n  Later = 4,\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"editableTitle\":\"EditableTitle_editableTitle__POY35\"};","import { ChangeEvent, KeyboardEvent, useState, memo, FC } from 'react'\r\n\r\nimport { TextField } from '@mui/material'\r\nimport { ThemeProvider, createTheme } from '@mui/material/styles'\r\n\r\nimport { RequestStatusType } from '../../app/appSlice'\r\n\r\nimport s from './EditableTitle.module.scss'\r\n\r\nexport type EditableTitleType = {\r\n  itemTitle: string\r\n  onChange: (taskTitle: string) => void\r\n  entityStatus: RequestStatusType\r\n}\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#e3f2fd', //this overide blue color\r\n      light: 'red', //overides light blue\r\n      dark: 'blue', //overides dark blue color\r\n    },\r\n  },\r\n})\r\n\r\nexport const EditableTitle: FC<EditableTitleType> = memo(\r\n  ({ itemTitle, onChange, entityStatus }) => {\r\n    const [editable, setEditable] = useState(false)\r\n    const [titleValue, setTitleValue] = useState('')\r\n\r\n    const handleDoubleClick = () => {\r\n      if (entityStatus !== 'loading') {\r\n        setTitleValue(itemTitle)\r\n        setEditable(true)\r\n      }\r\n    }\r\n\r\n    const handleBlurInput = () => {\r\n      setEditable(false)\r\n      if (titleValue !== itemTitle) {\r\n        onChange(titleValue)\r\n      }\r\n    }\r\n\r\n    const handleChangeInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n      setTitleValue(e.currentTarget.value)\r\n    }\r\n\r\n    const handleKeyDownInput = (e: KeyboardEvent<HTMLInputElement>) => {\r\n      if (e.key === 'Enter') {\r\n        handleBlurInput()\r\n      }\r\n    }\r\n\r\n    return (\r\n      <>\r\n        {editable ? (\r\n          <ThemeProvider theme={theme}>\r\n            <TextField\r\n              variant=\"standard\"\r\n              fullWidth\r\n              multiline={true}\r\n              size=\"small\"\r\n              type=\"text\"\r\n              value={titleValue}\r\n              onBlur={handleBlurInput}\r\n              onChange={handleChangeInput}\r\n              onKeyDown={handleKeyDownInput}\r\n              autoFocus\r\n              onFocus={e =>\r\n                e.currentTarget.setSelectionRange(\r\n                  e.currentTarget.value.length,\r\n                  e.currentTarget.value.length\r\n                )\r\n              }\r\n            />\r\n          </ThemeProvider>\r\n        ) : (\r\n          <span className={s.editableTitle} onDoubleClick={handleDoubleClick}>\r\n            {itemTitle}\r\n          </span>\r\n        )}\r\n      </>\r\n    )\r\n  }\r\n)\r\n","import { useCallback, memo, FC } from 'react'\r\n\r\nimport DeleteIcon from '@mui/icons-material/Delete'\r\nimport RadioButtonUncheckedIcon from '@mui/icons-material/RadioButtonUnchecked'\r\nimport TaskAltIcon from '@mui/icons-material/TaskAlt'\r\nimport { Checkbox, IconButton } from '@mui/material'\r\n\r\nimport s from '../../../app/App.module.scss'\r\nimport { RequestStatusType } from '../../../app/appSlice'\r\nimport { EditableTitle } from '../../../components/EditableTitle/EditableTitle'\r\nimport { TaskStatuses } from '../../../constants/task.enum'\r\nimport { useAppDispatch } from '../../../hooks/useAppDispatch'\r\nimport { useAppSelector } from '../../../hooks/useAppSelector'\r\n\r\nimport { deleteTaskTC, updateTaskTC } from './taskSlice'\r\n\r\ntype TaskType = {\r\n  taskID: string\r\n  taskTitle: string\r\n  status: TaskStatuses\r\n  todolistID: string\r\n  entityStatus: RequestStatusType\r\n}\r\n\r\nexport const Task: FC<TaskType> = memo(\r\n  ({ taskID, taskTitle, status, todolistID, entityStatus }) => {\r\n    console.log('render TASK')\r\n    const dispatch = useAppDispatch()\r\n    const appStatus = useAppSelector(state => state.app.status)\r\n    const isChecked = status === TaskStatuses.Completed\r\n\r\n    const onClickButton = useCallback(() => {\r\n      dispatch(deleteTaskTC({ todolistID, taskID }))\r\n    }, [])\r\n\r\n    const onChangeInput = useCallback(() => {\r\n      if (appStatus !== 'loading') {\r\n        dispatch(\r\n          updateTaskTC({\r\n            todolistID,\r\n            taskID,\r\n            domainModel: {\r\n              status: isChecked ? TaskStatuses.New : TaskStatuses.Completed,\r\n            },\r\n          })\r\n        )\r\n      }\r\n    }, [status, appStatus])\r\n\r\n    const onChangeTaskTitle = (taskTitle: string) => {\r\n      dispatch(updateTaskTC({ todolistID, taskID, domainModel: { title: taskTitle } }))\r\n    }\r\n\r\n    return (\r\n      <li\r\n        className={`${isChecked || entityStatus === 'loading' ? s.completed : ''} ${\r\n          s.taskContainer\r\n        }`}\r\n      >\r\n        <Checkbox\r\n          className={s.taskCheckbox}\r\n          checked={isChecked}\r\n          onChange={onChangeInput}\r\n          disabled={entityStatus === 'loading'}\r\n          size=\"small\"\r\n          style={isChecked ? { color: '#00ff26 ' } : { color: 'red ' }}\r\n          icon={<RadioButtonUncheckedIcon />}\r\n          checkedIcon={<TaskAltIcon />}\r\n        />\r\n        <EditableTitle\r\n          itemTitle={taskTitle}\r\n          onChange={onChangeTaskTitle}\r\n          entityStatus={entityStatus}\r\n        />\r\n        <IconButton\r\n          onClick={onClickButton}\r\n          disabled={entityStatus === 'loading'}\r\n          sx={{ alignSelf: 'flex-start', color: '#98b5ff' }}\r\n        >\r\n          <DeleteIcon fontSize=\"small\" />\r\n        </IconButton>\r\n      </li>\r\n    )\r\n  }\r\n)\r\n","// extracted by mini-css-extract-plugin\nexport default {\"todolistContainer\":\"Todolist_todolistContainer__YC+M4\",\"todolistTitleBlock\":\"Todolist_todolistTitleBlock__R3X9i\",\"todolistTitle\":\"Todolist_todolistTitle__+KXiF\",\"tasksList\":\"Todolist_tasksList__OnYZu\",\"blockButtons\":\"Todolist_blockButtons__nA1mg\",\"iconButton\":\"Todolist_iconButton__4Ir9G\"};","import { useCallback, memo, FC } from 'react'\r\n\r\nimport DeleteIcon from '@mui/icons-material/Delete'\r\nimport { Button, IconButton } from '@mui/material'\r\n\r\nimport { RequestStatusType } from '../../../app/appSlice'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableTitle } from '../../../components/EditableTitle/EditableTitle'\r\nimport { TaskStatuses } from '../../../constants/task.enum'\r\nimport { useAppDispatch } from '../../../hooks/useAppDispatch'\r\nimport { Task } from '../Task/Task'\r\nimport { TaskExtendedType, createTaskTC } from '../Task/taskSlice'\r\n\r\nimport s from './Todolist.module.scss'\r\nimport { updateTodolistTitleTC, tasksFilterValue, deleteTodolistTC } from './todolistSlice'\r\n\r\ntype TodolistType = {\r\n  todolistID: string\r\n  title: string\r\n  filterValue: string\r\n  tasks: TaskExtendedType\r\n  entityStatus: RequestStatusType\r\n}\r\n\r\nexport const Todolist: FC<TodolistType> = memo(\r\n  ({ todolistID, title, filterValue, tasks, entityStatus }) => {\r\n    const dispatch = useAppDispatch()\r\n    const isDisabled = entityStatus === 'loading'\r\n    let filteredTasks = tasks\r\n\r\n    if (filterValue === 'active') {\r\n      filteredTasks = filteredTasks.filter(taskElement => taskElement.status === TaskStatuses.New)\r\n    }\r\n\r\n    if (filterValue === 'completed') {\r\n      filteredTasks = filteredTasks.filter(\r\n        taskElement => taskElement.status === TaskStatuses.Completed\r\n      )\r\n    }\r\n\r\n    const handleChangeTodolistTitle = useCallback((todolistTitle: string) => {\r\n      dispatch(updateTodolistTitleTC({ todolistID, todolistTitle }))\r\n    }, [])\r\n\r\n    const handleClickCreateTask = useCallback(\r\n      (taskTitle: string) => {\r\n        dispatch(createTaskTC({ todolistID, taskTitle }))\r\n      },\r\n      [todolistID]\r\n    )\r\n\r\n    const handleAllClick = useCallback(() => {\r\n      dispatch(tasksFilterValue({ todolistID, filterValue: 'all' }))\r\n    }, [])\r\n\r\n    const handleActiveClick = useCallback(() => {\r\n      dispatch(tasksFilterValue({ todolistID, filterValue: 'active' }))\r\n    }, [])\r\n\r\n    const handleCompletedClick = useCallback(() => {\r\n      dispatch(tasksFilterValue({ todolistID, filterValue: 'completed' }))\r\n    }, [])\r\n\r\n    const handleClickDelete = useCallback(() => {\r\n      dispatch(deleteTodolistTC(todolistID))\r\n    }, [])\r\n\r\n    return (\r\n      <div className={s.todolistContainer}>\r\n        <div className={s.todolistTitleBlock}>\r\n          <h2 className={s.todolistTitle}>\r\n            <EditableTitle\r\n              itemTitle={title}\r\n              onChange={handleChangeTodolistTitle}\r\n              entityStatus={entityStatus}\r\n            />\r\n          </h2>\r\n          <IconButton className={s.iconButton} onClick={handleClickDelete} disabled={isDisabled}>\r\n            <DeleteIcon fontSize=\"small\" />\r\n          </IconButton>\r\n        </div>\r\n        <AddItemForm addItem={handleClickCreateTask} isDisabled={isDisabled} label={'Add task'} />\r\n        <ul className={s.tasksList}>\r\n          {filteredTasks?.map(taskElement => {\r\n            return (\r\n              <Task\r\n                key={taskElement.id}\r\n                taskID={taskElement.id}\r\n                taskTitle={taskElement.title}\r\n                status={taskElement.status}\r\n                entityStatus={taskElement.entityStatus}\r\n                todolistID={todolistID}\r\n              />\r\n            )\r\n          })}\r\n        </ul>\r\n        <div className={s.blockButtons}>\r\n          <Button variant={filterValue === 'all' ? 'contained' : 'text'} onClick={handleAllClick}>\r\n            All\r\n          </Button>\r\n          <Button\r\n            variant={filterValue === 'active' ? 'contained' : 'text'}\r\n            onClick={handleActiveClick}\r\n          >\r\n            Active\r\n          </Button>\r\n          <Button\r\n            variant={filterValue === 'completed' ? 'contained' : 'text'}\r\n            onClick={handleCompletedClick}\r\n          >\r\n            Completed\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n)\r\n","// extracted by mini-css-extract-plugin\nexport default {\"todolistsContainer\":\"Todolists_todolistsContainer__7Y4sm\"};","import { useEffect, memo, FC } from 'react'\r\n\r\nimport { useNavigate } from 'react-router'\r\n\r\nimport { PATH } from '../../constants/routePaths.enum'\r\nimport { useAppDispatch } from '../../hooks/useAppDispatch'\r\nimport { useAppSelector } from '../../hooks/useAppSelector'\r\n\r\nimport { TasksType } from './Task/taskSlice'\r\nimport { Todolist } from './Todolist/Todolist'\r\nimport { TodolistDomainType, getTodolistsTC } from './Todolist/todolistSlice'\r\nimport s from './Todolists.module.scss'\r\n\r\nexport type TodolistsType = {\r\n  isLoggedIn: boolean\r\n  demo?: boolean\r\n}\r\n\r\nexport const Todolists: FC<TodolistsType> = memo(({ demo = false, isLoggedIn }) => {\r\n  const navigate = useNavigate()\r\n  const dispatch = useAppDispatch()\r\n  const todolists = useAppSelector<TodolistDomainType[]>(state => state.todolists)\r\n  const tasks = useAppSelector<TasksType>(state => state.tasks)\r\n\r\n  useEffect(() => {\r\n    if (!demo && isLoggedIn) {\r\n      dispatch(getTodolistsTC())\r\n    } else {\r\n      navigate(PATH.LOGIN)\r\n    }\r\n  }, [isLoggedIn])\r\n\r\n  return (\r\n    <div className={s.todolistsContainer}>\r\n      {todolists.map(todolist => {\r\n        const filteredTasks = tasks[todolist.id]\r\n\r\n        return (\r\n          <Todolist\r\n            key={todolist.id}\r\n            todolistID={todolist.id}\r\n            tasks={filteredTasks}\r\n            title={todolist.title}\r\n            filterValue={todolist.filter}\r\n            entityStatus={todolist.entityStatus}\r\n          />\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n})\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');\nexports.default = _default;"],"names":["Symbol","for","props","children","localTheme","theme","outerTheme","useTheme","React","output","_extends","mergeOuterLocalTheme","nested","_jsx","ThemeContext","value","EMPTY_THEME","InnerThemeProvider","StyledEngineThemeContext","TaskStatuses","TaskPriorities","MuiThemeProvider","createTheme","palette","primary","main","light","dark","EditableTitle","memo","itemTitle","onChange","entityStatus","useState","editable","setEditable","titleValue","setTitleValue","handleBlurInput","TextField","variant","fullWidth","multiline","size","type","onBlur","e","currentTarget","onKeyDown","key","autoFocus","onFocus","setSelectionRange","length","className","s","onDoubleClick","Task","taskID","taskTitle","status","todolistID","console","log","dispatch","useAppDispatch","appStatus","useAppSelector","state","app","isChecked","Completed","onClickButton","useCallback","deleteTaskTC","onChangeInput","updateTaskTC","domainModel","New","Checkbox","checked","disabled","style","color","icon","RadioButtonUnchecked","checkedIcon","TaskAlt","title","IconButton","onClick","sx","alignSelf","Delete","fontSize","Todolist","filterValue","tasks","isDisabled","filteredTasks","filter","taskElement","handleChangeTodolistTitle","todolistTitle","updateTodolistTitleTC","handleClickCreateTask","createTaskTC","handleAllClick","tasksFilterValue","handleActiveClick","handleCompletedClick","handleClickDelete","deleteTodolistTC","AddItemForm","addItem","label","map","id","Button","Todolists","demo","isLoggedIn","navigate","useNavigate","todolists","useEffect","getTodolistsTC","PATH","todolist","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}