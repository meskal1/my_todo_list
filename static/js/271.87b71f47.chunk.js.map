{"version":3,"file":"static/js/271.87b71f47.chunk.js","mappings":"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","sources":["webpack://my_todo_list/./src/components/CustomInput/CustomInput.module.scss?272b","components/CustomInput/CustomInput.tsx","components/CustomPasswordInput/CustomPasswordInput.tsx","utils/validationSchema.ts","webpack://my_todo_list/./src/features/auth/Login/Login.module.scss?a120","features/auth/Login/Login.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"input\":\"CustomInput_input__F4ARm\"};","import { FC } from 'react'\r\n\r\nimport { TextField, TextFieldProps } from '@mui/material'\r\n\r\nimport s from './CustomInput.module.scss'\r\n\r\ntype CustomInputPropsType = TextFieldProps & {\r\n  value: string //Use our value to control input and also because value in MUI has unknown type\r\n}\r\n\r\nexport const CustomInput: FC<CustomInputPropsType> = ({ className, helperText, ...props }) => {\r\n  const finalClass = `${s.input} ${className ? className : ''}`\r\n  const errorText = helperText || ' '\r\n\r\n  return (\r\n    <TextField\r\n      className={finalClass}\r\n      variant={props.variant || 'standard'}\r\n      type={props.type || 'text'}\r\n      fullWidth={props.fullWidth || true}\r\n      {...props}\r\n      helperText={errorText}\r\n    />\r\n  )\r\n}\r\n","import { useState, FC } from 'react'\r\n\r\nimport Visibility from '@mui/icons-material/Visibility'\r\nimport VisibilityOff from '@mui/icons-material/VisibilityOff'\r\nimport { IconButton, InputAdornment, TextFieldProps } from '@mui/material'\r\n\r\nimport { CustomInput } from '../CustomInput/CustomInput'\r\n\r\ntype CustomPasswordInputPropsType = TextFieldProps & {\r\n  value: string //Use our value to control input and also because value in MUI has unknown type\r\n}\r\n\r\nexport const CustomPasswordInput: FC<CustomPasswordInputPropsType> = ({\r\n  value,\r\n  type,\r\n  ...props\r\n}) => {\r\n  const [showPassword, setShowPassword] = useState(false)\r\n\r\n  const handleClickShowPassword = () => setShowPassword(!showPassword)\r\n\r\n  return (\r\n    <CustomInput\r\n      type={showPassword ? 'text' : 'password'}\r\n      value={value}\r\n      InputProps={{\r\n        endAdornment: (\r\n          <InputAdornment position={'end'}>\r\n            {value && (\r\n              <IconButton aria-label=\"toggle password visibility\" onClick={handleClickShowPassword}>\r\n                {showPassword ? <VisibilityOff /> : <Visibility />}\r\n              </IconButton>\r\n            )}\r\n          </InputAdornment>\r\n        ),\r\n      }}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n","import * as yup from 'yup'\r\n\r\nconst email = yup\r\n  .string()\r\n  .email('Enter a valid email')\r\n  .max(50, 'Enter a valid email')\r\n  .required('Email is required')\r\nconst password = yup\r\n  .string()\r\n  .min(4, 'Password must contain at least 4 characters')\r\n  .max(30, 'Password is too long')\r\n  .required('Enter your password')\r\nconst rememberMe = yup.boolean()\r\n\r\nexport const login = yup.object({ email, password, rememberMe })\r\n","// extracted by mini-css-extract-plugin\nexport default {\"loginContainer\":\"Login_loginContainer__ie04e\",\"loginContent\":\"Login_loginContent__olL8z\",\"loginBlockTitle\":\"Login_loginBlockTitle__dGmAx\",\"text\":\"Login_text__lvckc\",\"link\":\"Login_link__bBrtP\",\"credentialsContainer\":\"Login_credentialsContainer__269yC\",\"credentials\":\"Login_credentials__yhG4N\",\"form\":\"Login_form__JjlK+\",\"checkbox\":\"Login_checkbox__bgQFp\",\"button\":\"Login_button__uX4Gr\"};","import { useEffect, KeyboardEvent } from 'react'\r\n\r\nimport RadioButtonUncheckedIcon from '@mui/icons-material/RadioButtonUnchecked'\r\nimport TaskAltIcon from '@mui/icons-material/TaskAlt'\r\nimport Button from '@mui/material/Button'\r\nimport Checkbox from '@mui/material/Checkbox'\r\nimport { useFormik } from 'formik'\r\nimport { useNavigate } from 'react-router'\r\n\r\nimport { CustomInput } from '../../../components/CustomInput/CustomInput'\r\nimport { CustomPasswordInput } from '../../../components/CustomPasswordInput/CustomPasswordInput'\r\nimport { PATH } from '../../../constants/routePaths.enum'\r\nimport { useAppDispatch } from '../../../hooks/useAppDispatch'\r\nimport { useAppSelector } from '../../../hooks/useAppSelector'\r\nimport { login } from '../../../utils/validationSchema'\r\nimport { logInTC } from '../authSlice'\r\n\r\nimport s from './Login.module.scss'\r\n\r\nexport const Login = () => {\r\n  const dispatch = useAppDispatch()\r\n  const navigate = useNavigate()\r\n  const appStatus = useAppSelector(state => state.app.status)\r\n  const isLoggedIn = useAppSelector(state => state.isLoggedIn.isLoggedIn)\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n      rememberMe: false,\r\n    },\r\n    validationSchema: login,\r\n    onSubmit: values => {\r\n      if (appStatus !== 'loading') {\r\n        dispatch(logInTC(values))\r\n      }\r\n    },\r\n  })\r\n\r\n  const handleFieldKeyDown = (e: KeyboardEvent<HTMLDivElement>) => {\r\n    if (e.key === 'Enter') {\r\n      formik.handleSubmit()\r\n    }\r\n  }\r\n  const handleCheckBoxKeyDown = (e: KeyboardEvent<HTMLButtonElement>) => {\r\n    if (e.key === 'Enter') {\r\n      formik.setFieldValue('rememberMe', !formik.getFieldProps('rememberMe').value)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isLoggedIn) {\r\n      navigate(PATH.TODOLISTS)\r\n    }\r\n  }, [isLoggedIn])\r\n\r\n  return (\r\n    <div className={s.loginContainer}>\r\n      <div className={s.loginContent}>\r\n        <div className={s.loginBlockTitle}>\r\n          <p className={s.text}>\r\n            To log in, get registered&nbsp;\r\n            <a\r\n              className={s.link}\r\n              href={'https://social-network.samuraijs.com/'}\r\n              target={'_blank'}\r\n              rel=\"noreferrer\"\r\n            >\r\n              here\r\n            </a>\r\n            &nbsp;or use common test account credentials:\r\n          </p>\r\n          <p className={s.credentialsContainer}>\r\n            <span>\r\n              Email: <span className={s.credentials}>free@samuraijs.com</span>\r\n            </span>\r\n\r\n            <span>\r\n              Password: <span className={s.credentials}>free</span>\r\n            </span>\r\n          </p>\r\n        </div>\r\n        <form className={s.form} onSubmit={formik.handleSubmit}>\r\n          <CustomInput\r\n            label=\"Email\"\r\n            autoComplete=\"new-password\"\r\n            error={formik.touched.email && !!formik.errors.email}\r\n            helperText={formik.touched.email && formik.errors.email}\r\n            onKeyDown={handleFieldKeyDown}\r\n            {...formik.getFieldProps('email')}\r\n          />\r\n          <CustomPasswordInput\r\n            label=\"Password\"\r\n            error={formik.touched.password && !!formik.errors.password}\r\n            helperText={formik.touched.password && formik.errors.password}\r\n            {...formik.getFieldProps('password')}\r\n          />\r\n          <label className={s.checkbox}>\r\n            <Checkbox\r\n              size=\"medium\"\r\n              onKeyDown={handleCheckBoxKeyDown}\r\n              style={formik.values.rememberMe ? { color: '#00ff26 ' } : { color: 'red ' }}\r\n              checked={formik.values.rememberMe}\r\n              icon={<RadioButtonUncheckedIcon />}\r\n              checkedIcon={<TaskAltIcon />}\r\n              {...formik.getFieldProps('rememberMe')}\r\n            />\r\n            Remember me\r\n          </label>\r\n          <Button className={s.button} type={'submit'} variant={'contained'}>\r\n            Log in\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n"],"names":["CustomInput","className","helperText","props","finalClass","s","errorText","TextField","variant","type","fullWidth","CustomPasswordInput","value","useState","showPassword","setShowPassword","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","VisibilityOff","Visibility","email","yup","max","required","password","min","rememberMe","login","Login","dispatch","useAppDispatch","navigate","useNavigate","appStatus","useAppSelector","state","app","status","isLoggedIn","formik","useFormik","initialValues","validationSchema","onSubmit","values","logInTC","useEffect","PATH","href","target","rel","handleSubmit","label","autoComplete","error","touched","errors","onKeyDown","e","key","getFieldProps","Checkbox","size","setFieldValue","style","color","checked","icon","RadioButtonUnchecked","checkedIcon","TaskAlt","Button"],"sourceRoot":""}